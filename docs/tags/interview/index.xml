<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interview on d4rkb1ue&#39;s Blog</title>
    <link>https://drkbl.com/tags/interview/</link>
    <description>Recent content in interview on d4rkb1ue&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Contact me at 7874364@gmail.com</copyright>
    <lastBuildDate>Sun, 26 Jul 2020 05:10:46 -0700</lastBuildDate><atom:link href="https://drkbl.com/tags/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pass 系统设计面试</title>
      <link>https://drkbl.com/posts/pass-system-design-interview/</link>
      <pubDate>Sun, 26 Jul 2020 05:10:46 -0700</pubDate>
      
      <guid>https://drkbl.com/posts/pass-system-design-interview/</guid>
      <description>经典问题 比如要求设计,
 Chat Messenger Twitter Feed Distributed Key-Value Global Object ID  典型流程 解答这样的问题, 可以这样一步步边确认边回答,
1. Data model/schema - 设计多种单体数据模型, 数据库关联关系 关键要考虑的数据特征是,
 数据量 关联性 读写分布 mutablity 数据均匀性  例子1 - 设计一个屏蔽词查询系统 这可以理解为就是一个 超大 Set.
 于是数据模型就很简单, 全局就一种模型, key-value, 无模型间关联/关系. 而这个系统中, 数据量极大, 读操作远远大于写操作, 而且基本只是增加新项目, 这对后面的 读 API 设计是一个很好的考量点 - 毕竟读一个很少变的数据库比频繁变的数据库简单多了. 不过数据显然非常不均匀, 有些 key 一定超级频繁, 比如问候对方家人相关的屏蔽词 - 这会影响后面 Cache 的设计.  例子2 - 设计一个电子银行系统 至少我们需要 User, Account, Transaction.
 Account 应该包含, ID, UserIdRef, Balances, TransactionIdRefs 于是就能画出来一个 Class Diagram.</description>
    </item>
    
  </channel>
</rss>
