<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coursera on d4rkb1ue&#39;s Blog</title>
    <link>https://drkbl.com/tags/coursera/</link>
    <description>Recent content in Coursera on d4rkb1ue&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Contact me at 7874364@gmail.com</copyright>
    <lastBuildDate>Fri, 17 Feb 2017 00:05:28 +0000</lastBuildDate>
    
	<atom:link href="https://drkbl.com/tags/coursera/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algs4/Selection Sort, Insertion Sort, Shell Sort (Week 3 Part 1)</title>
      <link>https://drkbl.com/posts/algorithms-part-1-note-5/</link>
      <pubDate>Fri, 17 Feb 2017 00:05:28 +0000</pubDate>
      
      <guid>https://drkbl.com/posts/algorithms-part-1-note-5/</guid>
      <description>Assertions MergeSort Botton-up MergeSort Sorting Complexity Java: Comparator interface Stability  Assertions // after sort assert isSorted(a, lo, hi); Can enable or disable at runtime
# enable assertions $ java -ea MyProgram # disable assertions (default) $ java -da MyProgram Best practices  Use assertions to check internal invariants assume assertions will be disabled in production code do not use for external argument checking  MergeSort Animation: Merge Sort</description>
    </item>
    
    <item>
      <title>Algs4/Selection Sort, Insertion Sort, Shell Sort (Week 2 Part 2)</title>
      <link>https://drkbl.com/posts/algorithms-part-1-note-4/</link>
      <pubDate>Wed, 15 Feb 2017 05:05:48 +0000</pubDate>
      
      <guid>https://drkbl.com/posts/algorithms-part-1-note-4/</guid>
      <description>Comparable Selection Sort Insertion Sort Shell Sort Shuffle Convex hull  Comparable Implement the Comparable interface to make the sort() universal.
public class File implements Comparable&amp;lt;File&amp;gt;{ … public int compareTo(File b){ … return -1; // this less than b  … return +1; // this greater than b  … return 0; // equal  } … } public static void sort(Comparable[] a){ int N = a.length; for (int i = 0; i &amp;lt; N; i++){ for (int j = i; j &amp;gt; 0; j--){ if (a[j].</description>
    </item>
    
    <item>
      <title>Algorithms Notes/Stack&amp;Queue (Week 2 Part 1)</title>
      <link>https://drkbl.com/posts/algorithms-part-1-note-3/</link>
      <pubDate>Sat, 12 Nov 2016 22:53:08 +0000</pubDate>
      
      <guid>https://drkbl.com/posts/algorithms-part-1-note-3/</guid>
      <description>Why Stack?   Why not other Java powerful colllection libraries?
Powerful like &amp;ldquo;Swiss Knife&amp;rdquo; but lack of efficiency.
  Except for efficiency, when stack is more convenient?
  Parsing in a compiler.
  Back button in a Web browser.
  Implementing function calls in a compiler. (Function call: push local environment and return address; Return: pop return address and local environment.)
  Recursive function: Can always use an explicit stack to remove recursion.</description>
    </item>
    
    <item>
      <title>Algorithms Notes/Analysis of Algorithms (Week 1 Part 2)</title>
      <link>https://drkbl.com/posts/algorithms-part-1-note-2/</link>
      <pubDate>Wed, 26 Oct 2016 01:18:14 +0000</pubDate>
      
      <guid>https://drkbl.com/posts/algorithms-part-1-note-2/</guid>
      <description>algs4.jar/Stopwatch public static void main(String[] args){ int[] a = In.readInts(args[0]); Stopwatch stopwatch = new Stopwatch(); StdOut.println(ThreeSum.count(a)); double time = stopwatch.elapsedTime(); // time since creation (in seconds) } 复杂度计算 Log-log plot For given data like in standard plot,
way to find out its T(N) is by: Log-log plot:
where we calculate by
lg(T (N)) = b lg N + c T (N) = a N^b, where a = 2^c in this case,</description>
    </item>
    
    <item>
      <title>Algorithms Notes/Dynamic Connectivity (Week 1 Part 1)</title>
      <link>https://drkbl.com/posts/algorithms-part-1-note-1/</link>
      <pubDate>Sat, 17 Sep 2016 19:28:29 +0000</pubDate>
      
      <guid>https://drkbl.com/posts/algorithms-part-1-note-1/</guid>
      <description>Question: Dynamic Connectivity Q: Given two points, are there any path connecting them? We also connect points dynamically.
Modeling  Reflexive: p is connected to p Symmetric: if p is connected to q, then q is connected to p Transitive: if p is connected to q and q is connected to r, then p is connected to r. Connected components: Given points, we can create connected componenets. Then we should deal with the question: Is P and Q connected?</description>
    </item>
    
  </channel>
</rss>