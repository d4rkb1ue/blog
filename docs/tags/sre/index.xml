<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SRE on d4rkb1ue&#39;s Blog</title>
    <link>https://drkbl.com/tags/sre/</link>
    <description>Recent content in SRE on d4rkb1ue&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Contact me at 7874364@gmail.com</copyright>
    <lastBuildDate>Mon, 13 Apr 2020 17:16:38 -0700</lastBuildDate>
    
	<atom:link href="https://drkbl.com/tags/sre/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Service Account vs. User Account</title>
      <link>https://drkbl.com/posts/service-account-vs-user-account/</link>
      <pubDate>Mon, 13 Apr 2020 17:16:38 -0700</pubDate>
      
      <guid>https://drkbl.com/posts/service-account-vs-user-account/</guid>
      <description>Firstly, we need to clarify where are we talking at,
 Linux system K8s service orchestration Directory service Services with API  In Linux System User accounts are used by real users, service accounts are used by system services such as web servers, mail transport agents, databases etc. The kernel doesn&#39;t care, besides UID 0.
 By convention, service accounts have user IDs in the low range, e.g. 100-999 or so Service accounts may own specific resources, even device special files, but they don&#39;t have superuser-like privileges Service accounts can be created like ordinary user accounts Service accounts shouldn&#39;t have a login shell, i.</description>
    </item>
    
    <item>
      <title>Linux Uptime Mismatch</title>
      <link>https://drkbl.com/posts/linux-uptime-mismatch/</link>
      <pubDate>Mon, 13 Apr 2020 15:57:05 -0700</pubDate>
      
      <guid>https://drkbl.com/posts/linux-uptime-mismatch/</guid>
      <description>I found sometimes, the outputs of,
last -x reboot who -b uptime -s sudo journalctl --list-boots Are showing different uptime since last booting which is annoying.
An example is,
last -x reboot # wtmp begins Wed Apr 1 10:29:40 2020 &amp;lt;-- this is actually not a reboot time. Explain later who -b # system boot 2020-03-02 19:19 uptime -s # 2020-03-02 19:19:54 sudo journalctl --list-boots # 0 46e3eb28ab51489ab8eb236d65a5086f Mon 2020-04-13 10:51:31 PDT—Mon 2020-04-13 15:46:43 PDT Although this might be a better solution which always tells us the truth,</description>
    </item>
    
    <item>
      <title>Init a Production K8s Cluster</title>
      <link>https://drkbl.com/posts/init-a-production-k8s-cluster/</link>
      <pubDate>Mon, 16 Mar 2020 01:52:09 -0700</pubDate>
      
      <guid>https://drkbl.com/posts/init-a-production-k8s-cluster/</guid>
      <description>k8s v1.16.8, kubespray v2.12.0
Init a Production K8s Cluster Kubespray works like a charm,
git clone https://github.com/kubernetes-sigs/kubespray.git cd kubespray sudo pip install -r requirements.txt cp -rfp inventory/sample inventory/mycluster # create cluster hosts poll declare -a IPS=(10.10.1.3 10.10.1.4 10.10.1.5) CONFIG_FILE=inventory/mycluster/inventory.yml python3 contrib/inventory_builder/inventory.py ${IPS[@]} mv inventory/mycluster/inventory.ini inventory/mycluster/inventory.yml # Review and modify the cluster config vi inventory/mycluster/inventory.yml ansible-playbook -i inventory/aws-test/inventory.yml --become --become-user=root --user=ubuntu --private-key=$(pwd)/.ssh/aws-ec2-test.pem cluster.yml Get kubeconfig from $1st-kube-master:/root/.kube/config.
One additional credentials will be available at inventory/mycluster/credentials.</description>
    </item>
    
    <item>
      <title>DNS 101</title>
      <link>https://drkbl.com/posts/dns-101/</link>
      <pubDate>Tue, 10 Mar 2020 00:59:54 -0700</pubDate>
      
      <guid>https://drkbl.com/posts/dns-101/</guid>
      <description>DNS In General DNS Server All DNS servers fall into one of four categories:
 Recursive Resolvers Root Nameservers TLD Nameservers Authoritative Nameservers  A recursive resolver (also known as a DNS recursor) is almost always the first stop in a DNS query. The recursive resolver acts as a middleman between a client and a DNS nameserver.
cc @ https://www.cloudflare.com/learning/dns/dns-server-types/
 DNS primarily uses UDP on port number 53 to serve requests.</description>
    </item>
    
    <item>
      <title>Expose Service in K8s</title>
      <link>https://drkbl.com/posts/expose-service-in-k8s/</link>
      <pubDate>Sun, 01 Mar 2020 23:41:46 -0800</pubDate>
      
      <guid>https://drkbl.com/posts/expose-service-in-k8s/</guid>
      <description>Publishing Services We want the service in k8s cluster to be accessed from outside.
Depending on either the Pod inside the cluster can communication with each other directly or not, there&#39;re three different approaches,
  Global Gateway.
No direct communication between Pods. All traffic will be routed by the gateway.
+- k8s cluster --+ | *********** | Pod &amp;lt;---&amp;gt; * global * | Pod &amp;lt;---&amp;gt; * gateway * &amp;lt;---&amp;gt; Clients | Pod &amp;lt;---&amp;gt; * &amp;quot;entry&amp;quot; * | *********** +---------------+   Service Mesh.</description>
    </item>
    
    <item>
      <title>Time Sync in Linux</title>
      <link>https://drkbl.com/posts/time-sync/</link>
      <pubDate>Fri, 07 Feb 2020 20:22:34 -0800</pubDate>
      
      <guid>https://drkbl.com/posts/time-sync/</guid>
      <description>Case For distribute system, sometimes the datetime on every server in the cluster, or a group of servers need to be synced.
Time on a Ubuntu Server Timekeepers in the System Timekeeper, who hold its own time.
 System time: managed by the Linux kernel RTC: real-time clock, hardware clock on your motherboard CMOS  Should always in the UTC timezone. But there’s nothing in the hardware clock itself says which timezone is used.</description>
    </item>
    
    <item>
      <title>Deploy Docker Registry</title>
      <link>https://drkbl.com/posts/deploy-docker-registry/</link>
      <pubDate>Sun, 02 Feb 2020 19:55:40 -0800</pubDate>
      
      <guid>https://drkbl.com/posts/deploy-docker-registry/</guid>
      <description>Case To distribute the updated docker images among a cluster, compared with using a centralized registry, use P2P registry is more bandwidth and speed-efficient.
We can deploy docker image registry on any server.
Steps To init the server,
docker run -d -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 -p 5000:5000 --name registry registry:2 docker tag original.registry.com/image-name:version my-registry:5000/image-name:version docker push my-registry:5000/image-name:version To let client connect to server,
vi /etc/docker/daemon.json # add a line # { # .</description>
    </item>
    
  </channel>
</rss>